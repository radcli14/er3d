#usda 1.0
(
    customLayerData = {
        string creator = "Reality Composer Pro Version 2.0 (448.60.4)"
    }
    defaultPrim = "Root"
    metersPerUnit = 1
    upAxis = "Y"
)

def Xform "Root"
{
    reorder nameChildren = ["YawFrame", "Materials"]
    def Xform "YawFrame" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
        customData = {
            float3 rotationEulerHint = (8.0534264e-8, -3.5527137e-15, 0)
        }
    )
    {
        reorder nameChildren = ["frame90pct", "PitchFrame"]
        rel material:binding = </Root/Materials/Blue> (
            bindMaterialAs = "weakerThanDescendants"
        )
        float2 ui:nodegraph:node:pos = (20, 20)
        int ui:nodegraph:node:stackingOrder = 1
        quatf xformOp:orient = (1, 4.0267132e-8, -1.7763568e-15, 7.1528795e-23)
        float3 xformOp:scale = (0.99999946, 0.9999996, 0.99999946)
        float3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Xform "PitchFrame" (
            active = true
            prepend apiSchemas = ["MaterialBindingAPI"]
            customData = {
                float3 rotationEulerHint = (4.10232e-15, 0, 0)
            }
        )
        {
            reorder nameChildren = ["frame80pct", "RollFrame", "xArrow", "zArrow"]
            rel material:binding = </Root/Materials/Green> (
                bindMaterialAs = "weakerThanDescendants"
            )
            quatf xformOp:orient = (1, 2.05116e-15, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            float3 xformOp:translate = (1.7763568e-15, 0, -2.9802322e-8)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def Xform "RollFrame" (
                active = true
                prepend apiSchemas = ["MaterialBindingAPI"]
                customData = {
                    float3 rotationEulerHint = (0, 1.776357e-15, 8.498326e-8)
                }
            )
            {
                reorder nameChildren = ["frame70pct", "yArrow", "zArrow", "Space_Shuttle_Discovery"]
                rel material:binding = </Root/Materials/Red> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                quatf xformOp:orient = (1, -3.7740153e-23, 8.881785e-16, 4.249163e-8)
                float3 xformOp:scale = (1, 1, 1)
                float3 xformOp:translate = (0, -2.141607e-9, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                def "frame70pct" (
                    active = true
                    customData = {
                        float3 rotationEulerHint = (0, 0, 0)
                    }
                    references = @frame70pct.usdz@
                )
                {
                    quatf xformOp:orient = (1, 0, 0, 0)
                    float3 xformOp:scale = (0.07, 0.07, 0.07)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
                }
            }

            def "frame80pct" (
                active = true
                customData = {
                    float3 rotationEulerHint = (0, 0, 0)
                }
                references = @frame80pct.usdz@
            )
            {
                quatf xformOp:orient = (1, 0, 0, 0)
                float3 xformOp:scale = (0.07, 0.07, 0.07)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
            }
        }

        def "frame90pct" (
            active = true
            customData = {
                float3 rotationEulerHint = (0, 0, 0)
            }
            references = @frame90pct.usdz@
        )
        {
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (0.07, 0.07, 0.07)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }
    }

    def Scope "Materials" (
        active = true
    )
    {
        reorder nameChildren = ["Blue", "Green", "Red"]
        def Material "Blue"
        {
            token outputs:mtlx:surface
            token outputs:realitykit:vertex
            token outputs:surface.connect = </Root/Materials/Blue/UsdPreviewSurface.outputs:surface>
            float2 ui:nodegraph:node:pos = (20, 20)
            int ui:nodegraph:node:stackingOrder = 1

            def Shader "UsdPreviewSurface"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (0.016804177, 0.198351, 1) (
                    colorSpace = "srgb_texture"
                )
                token outputs:surface
            }
        }

        def Material "Green"
        {
            token outputs:mtlx:surface
            token outputs:realitykit:vertex
            token outputs:surface.connect = </Root/Materials/Green/UsdPreviewSurface.outputs:surface>
            float2 ui:nodegraph:node:pos = (20, 20)
            int ui:nodegraph:node:stackingOrder = 1

            def Shader "UsdPreviewSurface"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (0, 0.97680455, 0) (
                    colorSpace = "srgb_texture"
                )
                token outputs:surface
            }
        }

        def Material "Red"
        {
            token outputs:mtlx:surface
            token outputs:realitykit:vertex
            token outputs:surface.connect = </Root/Materials/Red/UsdPreviewSurface.outputs:surface>
            float2 ui:nodegraph:node:pos = (20, 20)
            int ui:nodegraph:node:stackingOrder = 1

            def Shader "UsdPreviewSurface"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (1, 0.14913142, 0) (
                    colorSpace = "srgb_texture"
                )
                token outputs:surface
            }
        }
    }
}

