#usda 1.0
(
    defaultPrim = "Root"
    metersPerUnit = 1
    upAxis = "Y"
)

reorder rootPrims = ["Root", "GlobalX", "GlobalY", "GlobalZ"]

def Xform "Root"
{
    reorder nameChildren = ["Anchoring", "Materials", "Sphere", "Earth", "SunElevation"]
    def Scope "Materials" (
        active = true
    )
    {
        reorder nameChildren = ["Red", "Green", "Blue", "Gray", "Shiny", "GlobeMaterial"]
        def Material "Red"
        {
            token outputs:mtlx:surface
            token outputs:realitykit:vertex
            prepend token outputs:surface.connect = </Root/Materials/Red/UsdPreviewSurface.outputs:surface>

            def Shader "UsdPreviewSurface"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (1, 0.14913142, 0) (
                    colorSpace = "srgb_texture"
                )
                token outputs:surface
            }
        }

        def Material "Green"
        {
            token outputs:mtlx:surface
            token outputs:realitykit:vertex
            prepend token outputs:surface.connect = </Root/Materials/Green/UsdPreviewSurface.outputs:surface>

            def Shader "UsdPreviewSurface"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (0, 0.97680455, 0) (
                    colorSpace = "srgb_texture"
                )
                token outputs:surface
            }
        }

        def Material "Blue"
        {
            token outputs:mtlx:surface
            token outputs:realitykit:vertex
            prepend token outputs:surface.connect = </Root/Materials/Blue/UsdPreviewSurface.outputs:surface>

            def Shader "UsdPreviewSurface"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (0.016804177, 0.198351, 1) (
                    colorSpace = "srgb_texture"
                )
                token outputs:surface
            }
        }

        def Material "Gray"
        {
            token outputs:mtlx:surface
            token outputs:realitykit:vertex
            prepend token outputs:surface.connect = </Root/Materials/Gray/UsdPreviewSurface.outputs:surface>

            def Shader "UsdPreviewSurface"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (1, 1, 1) (
                    colorSpace = "srgb_texture"
                )
                token outputs:surface
            }
        }

        def Material "Shiny"
        {
            token outputs:mtlx:surface
            token outputs:realitykit:vertex
            prepend token outputs:surface.connect = </Root/Materials/Shiny/UsdPreviewSurface.outputs:surface>

            def Shader "UsdPreviewSurface"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0.5
                color3f inputs:diffuseColor = (1, 1, 1) (
                    colorSpace = "lin_srgb"
                )
                float inputs:metallic = 0.7
                float inputs:roughness = 0.5
                token outputs:surface
            }
        }

        def Material "GlobeMaterial" (
            active = false
        )
        {
            token inputs:frame:stPrimvarName = "st" (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (126.25, 86.5)
                        float2 sizeInSubgraph = (203.5, 53)
                    }
                }
            )
            token outputs:mtlx:surface.connect = </Root/Materials/GlobeMaterial/PreviewSurface.outputs:out>
            token outputs:realitykit:vertex
            token outputs:surface.connect = </Root/Materials/GlobeMaterial/DefaultSurfaceShader.outputs:surface>
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (-137.25, 109.5)
            float2 ui:nodegraph:realitykit:subgraphOutputs:size = (181.5, 99)

            def Shader "DefaultSurfaceShader" (
                active = true
            )
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoat.connect = </Root/Materials/GlobeMaterial/clearcoat.outputs:r>
                float inputs:clearcoatRoughness = 0.75
                color3f inputs:diffuseColor = (1, 1, 1)
                color3f inputs:diffuseColor.connect = </Root/Materials/GlobeMaterial/diffuseColor.outputs:rgb>
                color3f inputs:emissiveColor = (0, 0, 0)
                color3f inputs:emissiveColor.connect = </Root/Materials/GlobeMaterial/emissiveColor.outputs:rgb>
                float inputs:ior = 0.1
                normal3f inputs:normal = (0, 0, 1)
                normal3f inputs:normal.connect = </Root/Materials/GlobeMaterial/normal.outputs:rgb>
                float inputs:opacity = 0
                float inputs:roughness = 0.75
                token outputs:surface
            }

            def Shader "diffuseColor"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @ER3D/Assets.xcassets/8081_earthmap10k.imageset/8081_earthmap10k.jpg@
                float2 inputs:st.connect = </Root/Materials/GlobeMaterial/diffuseColor/TexCoordReader.outputs:result>
                color3f outputs:rgb

                def Shader "TexCoordReader"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    token inputs:varname.connect = </Root/Materials/GlobeMaterial/DefaultSurfaceShader.inputs:frame:stPrimvarName>
                    float2 outputs:result
                }
            }

            def Shader "PreviewSurface" (
                active = false
            )
            {
                uniform token info:id = "ND_UsdPreviewSurface_surfaceshader"
                token outputs:out
                float2 ui:nodegraph:node:pos = (-255, 105)
                float2 ui:nodegraph:node:size = (148.5, 199)
            }

            def Shader "normal"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @ER3D/Assets.xcassets/8081_earthnormal10k.imageset/8081_earthnormal10k.jpg@
                float2 inputs:st.connect = </Root/Materials/GlobeMaterial/normal/TexCoordReader.outputs:result>
                normal3f outputs:rgb

                def Shader "TexCoordReader"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    token inputs:varname.connect = </Root/Materials/GlobeMaterial/DefaultSurfaceShader.inputs:frame:stPrimvarName>
                    float2 outputs:result
                }
            }

            def Shader "emissiveColor"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @ER3D/Assets.xcassets/8081_earthlights10k.imageset/8081_earthlights10k.jpg@
                float2 inputs:st.connect = </Root/Materials/GlobeMaterial/emissiveColor/TexCoordReader.outputs:result>
                color3f outputs:rgb

                def Shader "TexCoordReader"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    token inputs:varname.connect = </Root/Materials/GlobeMaterial/DefaultSurfaceShader.inputs:frame:stPrimvarName>
                    float2 outputs:result
                }
            }

            def Shader "clearcoat"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @ER3D/Assets.xcassets/8081_earthspec10k.imageset/8081_earthspec10k.jpg@
                float2 inputs:st.connect = </Root/Materials/GlobeMaterial/clearcoat/TexCoordReader.outputs:result>
                float outputs:r

                def Shader "TexCoordReader"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    token inputs:varname.connect = </Root/Materials/GlobeMaterial/DefaultSurfaceShader.inputs:frame:stPrimvarName>
                    float2 outputs:result
                }
            }
        }
    }

    def RealityKitComponent "Anchoring"
    {
        uniform token info:id = "RealityKit.Anchoring"

        def RealityKitStruct "descriptor"
        {
            matrix4d transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            token type = "Plane"
        }
    }

    def Sphere "Sphere" (
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        reorder nameChildren = ["Globe", "Earth", "ECEF"]
        rel material:binding = None (
            bindMaterialAs = "weakerThanDescendants"
        )
        double radius = 0.6
        float3 xformOp:translate = (0, 0.7, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Sphere "Globe" (
            active = false
            prepend apiSchemas = ["MaterialBindingAPI"]
            customData = {
                float3 rotationEulerHint = (0, 1.0658143e-14, 0)
            }
        )
        {
            reorder nameChildren = ["GlobalX", "GlobalY", "GlobalZ", "GlobalX", "GlobalY", "GlobalZ"]
            rel material:binding = </Root/Materials/GlobeMaterial>
            double radius = 0.6282
            quatf xformOp:orient = (1, 0, 5.3290714e-15, 0)
            float3 xformOp:scale = (1, 0.99999994, 0.99999994)
            float3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def "Earth" (
            active = true
            customData = {
                float3 rotationEulerHint = (0, -0.148353, 0)
            }
            references = @Earth.usdz@
        )
        {
            reorder nameChildren = ["geom", "GlobalX", "GlobalY", "GlobalZ", "ECEF"]
            quatf xformOp:orient = (0.9972502, 0, -0.07410849, 0)
            float3 xformOp:scale = (6.28, 6.28, 6.28)
            float3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            over "geom"
            {
                over "realistic"
                {
                    over "materials"
                    {
                        over "usdpreviewsurface8sg"
                        {
                            string inputs:earth_realistic_ao_1:varname (
                                customData = {
                                    dictionary realitykit = {
                                        float2 positionInSubgraph = (317, 709.5)
                                    }
                                }
                            )
                            string inputs:earth_realistic_bc_1:varname (
                                customData = {
                                    dictionary realitykit = {
                                        float2 positionInSubgraph = (604, 709.5)
                                    }
                                }
                            )
                            string inputs:earth_realistic_n_1:varname (
                                customData = {
                                    dictionary realitykit = {
                                        float2 positionInSubgraph = (891, 709.5)
                                    }
                                }
                            )
                            string inputs:earth_realistic_r_1:varname (
                                customData = {
                                    dictionary realitykit = {
                                        float2 positionInSubgraph = (1178, 709.5)
                                    }
                                }
                            )
                            token outputs:realitykit:vertex
                            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (1406.75, 235.75)

                            over "earth_realistic_n_1_mtlx_scale"
                            {
                                float2 ui:nodegraph:node:pos = (619.25, 521.5)
                            }

                            over "earth_realistic_bc_1_mtlx"
                            {
                                float2 ui:nodegraph:node:pos = (885.5, 421.5)
                                int ui:nodegraph:node:stackingOrder = 5
                            }

                            over "earth_realistic_mat_mtlx"
                            {
                                float2 ui:nodegraph:node:pos = (1154.5, 235.75)
                                int ui:nodegraph:node:stackingOrder = 7
                                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["Advanced"]
                            }

                            over "Lookup_st"
                            {
                                float2 ui:nodegraph:node:pos = (91, 346.25)
                            }

                            over "earth_realistic_r_1_mtlx"
                            {
                                float2 ui:nodegraph:node:pos = (619.25, 261)
                                int ui:nodegraph:node:stackingOrder = 3
                            }

                            over "earth_realistic_ao_1_mtlx"
                            {
                                float2 ui:nodegraph:node:pos = (350, 100.5)
                                int ui:nodegraph:node:stackingOrder = 4
                            }

                            over "earth_realistic_n_1_mtlx"
                            {
                                float2 ui:nodegraph:node:pos = (350, 521.5)
                                int ui:nodegraph:node:stackingOrder = 1
                            }

                            over "earth_realistic_n_1_mtlx_offset"
                            {
                                float2 ui:nodegraph:node:pos = (885.5, 600)
                            }
                        }

                        over "usdpreviewsurface7sg"
                        {
                            string inputs:earth_clouds_realistic_bc_1:varname (
                                customData = {
                                    dictionary realitykit = {
                                        float2 positionInSubgraph = (321.75, 890.5)
                                    }
                                }
                            )
                            string inputs:earth_clouds_realistic_n_1:varname (
                                customData = {
                                    dictionary realitykit = {
                                        float2 positionInSubgraph = (608.75, 890.5)
                                    }
                                }
                            )
                            string inputs:earth_clouds_realistic_o_1:varname (
                                customData = {
                                    dictionary realitykit = {
                                        float2 positionInSubgraph = (895.75, 890.5)
                                    }
                                }
                            )
                            string inputs:earth_clouds_realistic_r_1:varname (
                                customData = {
                                    dictionary realitykit = {
                                        float2 positionInSubgraph = (1182.75, 890.5)
                                    }
                                }
                            )
                            token outputs:realitykit:vertex
                            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (1416.25, 281)

                            over "earth_clouds_realistic_r_1_mtlx"
                            {
                                float2 ui:nodegraph:node:pos = (350, 702.5)
                            }

                            over "earth_clouds_realistic_o_1_mtlx"
                            {
                                float2 ui:nodegraph:node:pos = (623, 100.5)
                            }

                            over "earth_clouds_realistic_bc_1_mtlx"
                            {
                                float2 ui:nodegraph:node:pos = (893, 263)
                            }

                            over "earth_clouds_realistic_n_1_mtlx"
                            {
                                float2 ui:nodegraph:node:pos = (350, 441.5)
                                int ui:nodegraph:node:stackingOrder = 1
                            }

                            over "earth_clouds_realistic_n_1_mtlx_scale"
                            {
                                float2 ui:nodegraph:node:pos = (623, 441.5)
                            }

                            over "earth_clouds_realistic_mat_mtlx"
                            {
                                float2 ui:nodegraph:node:pos = (1163, 281)
                                int ui:nodegraph:node:stackingOrder = 2
                            }

                            over "Lookup_st"
                            {
                                float2 ui:nodegraph:node:pos = (91, 301)
                            }

                            over "earth_clouds_realistic_n_1_mtlx_offset"
                            {
                                float2 ui:nodegraph:node:pos = (893, 441.5)
                            }
                        }
                    }
                }
            }

            def Cone "GlobalX" (
                active = true
                prepend apiSchemas = ["MaterialBindingAPI"]
                customData = {
                    float3 rotationEulerHint = (0, 0, 1.5707964)
                }
            )
            {
                uniform token axis = "Y"
                double height = 0.7000000000000001
                rel material:binding = </Root/Materials/Red> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double radius = 0.05
                quatf xformOp:orient = (0.70710677, 0, 0, 0.70710677)
                float3 xformOp:scale = (0.15923566, 0.15923566, 0.15923566)
                float3 xformOp:translate = (-0.055732485, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
            }

            def Cone "GlobalY" (
                active = true
                prepend apiSchemas = ["MaterialBindingAPI"]
                customData = {
                    float3 rotationEulerHint = (1.5707964, 0, 0)
                }
            )
            {
                uniform token axis = "Y"
                double height = 0.7000000000000001
                rel material:binding = </Root/Materials/Green> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double radius = 0.05
                float2 ui:nodegraph:node:pos = (20, 20)
                int ui:nodegraph:node:stackingOrder = 1
                quatf xformOp:orient = (0.7071067, 0.70710677, 0, 0)
                float3 xformOp:scale = (0.15923563, 0.15923563, 0.15923563)
                float3 xformOp:translate = (0, 0, 0.055732477)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
            }

            def Cone "GlobalZ" (
                active = true
                prepend apiSchemas = ["MaterialBindingAPI"]
                customData = {
                    float3 rotationEulerHint = (0, 0, 0)
                }
            )
            {
                uniform token axis = "Y"
                double height = 0.7000000000000001
                rel material:binding = </Root/Materials/Blue> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double radius = 0.05
                float2 ui:nodegraph:node:pos = (40, 40)
                int ui:nodegraph:node:stackingOrder = 2
                quatf xformOp:orient = (1, 0, 0, 0)
                float3 xformOp:scale = (0.15923563, 0.15923561, 0.15923561)
                float3 xformOp:translate = (0, 0.05573248, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
            }
        }

        def Xform "ECEF" (
            active = true
            customData = {
                float3 rotationEulerHint = (-1.570796, 3.1415927, 0)
            }
        )
        {
            reorder nameChildren = ["Long", "SunAzimuth"]
            quatf xformOp:orient = (-3.0908623e-8, 3.0908627e-8, 0.70710677, 0.70710677)
            float3 xformOp:scale = (0.9999999, 0.9999999, 0.9999999)
            float3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def Xform "Long" (
                active = true
                customData = {
                    float3 rotationEulerHint = (0, 0, -1.4748033)
                }
            )
            {
                reorder nameChildren = ["Lat", "EarthRadius"]
                quatf xformOp:orient = (0.7402181, 0, 0, -0.67236686)
                float3 xformOp:scale = (1, 1, 1)
                float3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                def Xform "Lat" (
                    active = true
                    customData = {
                        float3 rotationEulerHint = (0, -0.74176496, 0)
                    }
                )
                {
                    quatf xformOp:orient = (0.93200785, 0, -0.36243802, 0)
                    float3 xformOp:scale = (0.99999994, 1, 0.99999994)
                    float3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                    def Xform "EarthRadius" (
                        active = true
                        customData = {
                            float3 rotationEulerHint = (0, 0, 0)
                        }
                    )
                    {
                        quatf xformOp:orient = (1, 0, 0, 0)
                        float3 xformOp:scale = (0.99999994, 0.99999994, 0.99999994)
                        float3 xformOp:translate = (0.7, 0, 0)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                        def Xform "LocalGeodeticFrame" (
                            active = true
                            prepend apiSchemas = ["MaterialBindingAPI"]
                            customData = {
                                float3 rotationEulerHint = (0, -1.5707963, 0)
                            }
                        )
                        {
                            reorder nameChildren = ["frame", "YawFrame", "xArrow", "yArrow", "zArrow"]
                            rel material:binding = </Root/Materials/Gray> (
                                bindMaterialAs = "weakerThanDescendants"
                            )
                            quatf xformOp:orient = (0.7071068, 0, -0.7071067, 0)
                            float3 xformOp:scale = (1, 1, 1)
                            float3 xformOp:translate = (0, 0, 0)
                            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                            def Xform "YawFrame" (
                                active = true
                                prepend apiSchemas = ["MaterialBindingAPI"]
                                customData = {
                                    float3 rotationEulerHint = (0, 0, 0)
                                }
                            )
                            {
                                reorder nameChildren = ["frame90pct", "PitchFrame"]
                                rel material:binding = </Root/Materials/Blue> (
                                    bindMaterialAs = "weakerThanDescendants"
                                )
                                quatf xformOp:orient = (1, 0, 0, 0)
                                float3 xformOp:scale = (1, 1, 1)
                                float3 xformOp:translate = (0, 0, 0)
                                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                                def Xform "PitchFrame" (
                                    active = true
                                    prepend apiSchemas = ["MaterialBindingAPI"]
                                    customData = {
                                        float3 rotationEulerHint = (4.10232e-15, 0, 0)
                                    }
                                )
                                {
                                    reorder nameChildren = ["frame80pct", "RollFrame", "xArrow", "zArrow"]
                                    rel material:binding = </Root/Materials/Green> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                    quatf xformOp:orient = (1, 2.05116e-15, 0, 0)
                                    float3 xformOp:scale = (1, 1, 1)
                                    float3 xformOp:translate = (1.7763568e-15, 0, -2.9802322e-8)
                                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                                    def Xform "RollFrame" (
                                        active = true
                                        prepend apiSchemas = ["MaterialBindingAPI"]
                                        customData = {
                                            float3 rotationEulerHint = (0, 1.776357e-15, 8.498326e-8)
                                        }
                                    )
                                    {
                                        reorder nameChildren = ["frame70pct", "yArrow", "zArrow", "Space_Shuttle_Discovery"]
                                        rel material:binding = </Root/Materials/Red> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                        quatf xformOp:orient = (1, -3.7740153e-23, 8.881785e-16, 4.249163e-8)
                                        float3 xformOp:scale = (1, 1, 1)
                                        float3 xformOp:translate = (0, -2.141607e-9, 0)
                                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                                        def "Space_Shuttle_Discovery" (
                                            active = true
                                            customData = {
                                                float3 rotationEulerHint = (-1.5707963, -1.1920929e-7, -1.5707964)
                                            }
                                            references = @Orbiter_Space_Shuttle_OV-103_Discovery-150k-4096.usdz@
                                        )
                                        {
                                            quatf xformOp:orient = (-0.5, 0.5, -0.49999994, 0.50000006)
                                            float3 xformOp:scale = (0.0025, 0.0025, 0.0025)
                                            float3 xformOp:translate = (-0.0325, 3.5647125e-9, -0.008)
                                            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
                                        }

                                        def "frame70pct" (
                                            active = true
                                            customData = {
                                                float3 rotationEulerHint = (0, 0, 0)
                                            }
                                            references = @frame70pct.usdz@
                                        )
                                        {
                                            quatf xformOp:orient = (1, 0, 0, 0)
                                            float3 xformOp:scale = (0.07, 0.07, 0.07)
                                            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
                                        }
                                    }

                                    def "frame80pct" (
                                        active = true
                                        customData = {
                                            float3 rotationEulerHint = (0, 0, 0)
                                        }
                                        references = @frame80pct.usdz@
                                    )
                                    {
                                        quatf xformOp:orient = (1, 0, 0, 0)
                                        float3 xformOp:scale = (0.07, 0.07, 0.07)
                                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
                                    }
                                }

                                def "frame90pct" (
                                    active = true
                                    customData = {
                                        float3 rotationEulerHint = (0, 0, 0)
                                    }
                                    references = @frame90pct.usdz@
                                )
                                {
                                    quatf xformOp:orient = (1, 0, 0, 0)
                                    float3 xformOp:scale = (0.07, 0.07, 0.07)
                                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
                                }
                            }

                            def "frame" (
                                active = true
                                customData = {
                                    float3 rotationEulerHint = (0, 0, 0)
                                }
                                references = @frame.usdz@
                            )
                            {
                                quatf xformOp:orient = (1, 0, 0, 0)
                                float3 xformOp:scale = (0.07, 0.07, 0.07)
                                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
                            }
                        }
                    }
                }
            }

            def Xform "SunAzimuth" (
                active = true
                customData = {
                    float3 rotationEulerHint = (0, 0, 0)
                }
            )
            {
                reorder nameChildren = ["Sun", "SunElevation"]
                quatf xformOp:orient = (1, 0, 0, 0)
                float3 xformOp:scale = (1.0000001, 1.0000001, 1.0000001)
                float3 xformOp:translate = (-8.056579e-15, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                def Xform "SunElevation" (
                    active = true
                )
                {
                    reorder nameChildren = ["Sun", "Sun"]
                    quatf xformOp:orient = (1, 4.214685e-8, 9.00005e-15, -1.3563454e-15)
                    float3 xformOp:scale = (1.0000001, 1.0000001, 1.0000001)
                    float3 xformOp:translate = (-6.061251e-22, 5.960465e-8, -4.6701746e-15)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                    def "Sun" (
                        active = true
                        customData = {
                            float3 rotationEulerHint = (0, -1.5707963, 0)
                        }
                        references = @Sun.usdz@
                    )
                    {
                        quatf xformOp:orient = (0.70710677, 0, -0.70710677, 0)
                        float3 xformOp:scale = (0.25, 0.25, 0.25)
                        float3 xformOp:translate = (-0.62, 0, 0)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                        def RealityKitComponent "DirectionalLight"
                        {
                            uniform token info:id = "RealityKit.DirectionalLight"
                            float intensity = 10000

                            def RealityKitStruct "Shadow"
                            {
                            }
                        }
                    }
                }
            }
        }
    }
}

