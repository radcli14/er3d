#usda 1.0
(
    customLayerData = {
        string creator = "Reality Composer Pro Version 2.0 (448.60.4)"
    }
    defaultPrim = "Root"
    metersPerUnit = 1
    upAxis = "Y"
)

def Xform "Root"
{
    reorder nameChildren = ["Sphere", "Materials", "ZUp"]
    def Sphere "Sphere" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        reorder nameChildren = ["Transparent", "Procession", "ZUp"]
        rel material:binding = </Root/Sphere/Transparent>
        double radius = 0.6
        float3 xformOp:translate = (0, 0.6, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Material "Transparent"
        {
            token outputs:mtlx:surface
            token outputs:realitykit:vertex
            token outputs:surface.connect = </Root/Sphere/Transparent/DefaultSurfaceShader.outputs:surface>

            def Shader "DefaultSurfaceShader"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoatRoughness = 0
                color3f inputs:diffuseColor = (1, 1, 1)
                float inputs:ior = 100
                float inputs:opacity = 0
                float inputs:opacityThreshold = 0.1
                float inputs:roughness = 0.75
                token outputs:surface
            }
        }

        def Xform "ZUp" (
            active = true
            customData = {
                float3 rotationEulerHint = (1.570796, -1.5707963, 0)
            }
        )
        {
            reorder nameChildren = ["Procession", "RefFrame"]
            quatf xformOp:orient = (0.50000006, -0.4999999, -0.5000001, -0.49999994)
            float3 xformOp:scale = (0.47, 0.47, 0.47)
            float3 xformOp:translate = (0, -0.6, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def "RefFrame" (
                active = true
                prepend apiSchemas = ["MaterialBindingAPI"]
                customData = {
                    float3 rotationEulerHint = (-1.1920927e-7, 0, 5.024295e-15)
                }
                references = @frame.usdz@
            )
            {
                reorder nameChildren = ["Y", "Z", "X", "env_light", "gyro"]
                rel material:binding = </Root/Materials/Gray> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                quatf xformOp:orient = (0.99999994, 0, 0, 0)
                float3 xformOp:scale = (1, 1, 1)
                float3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                over "Z" (
                    customData = {
                        float3 rotationEulerHint = (0, -3.1415923, 0)
                    }
                )
                {
                    quatf xformOp:orient = (-1.9470718e-7, 0, 1, 0)
                    float3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 3)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
                }
            }

            def "Procession" (
                active = true
                prepend apiSchemas = ["MaterialBindingAPI"]
                customData = {
                    float3 rotationEulerHint = (0, 0, 0.78539807)
                }
                references = @frame90pct.usdz@
            )
            {
                reorder nameChildren = ["gyro", "Nutation", "Y", "Z", "X", "env_light"]
                rel material:binding = </Root/Materials/Blue> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                quatf xformOp:orient = (0.92387956, 0, 0, 0.3826834)
                float3 xformOp:scale = (1, 1, 1)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                over "Z"
                {
                    quatf xformOp:orient = (-1.3315807e-7, 0, 1, 0)
                    float3 xformOp:scale = (0.9, 0.9, 1)
                    double3 xformOp:translate = (0, 0, 3)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
                }

                def "Nutation" (
                    active = true
                    prepend apiSchemas = ["MaterialBindingAPI"]
                    customData = {
                        float3 rotationEulerHint = (0.5235988, 0, 0)
                    }
                    references = @frame80pct.usdz@
                )
                {
                    reorder nameChildren = ["Spin", "Z", "X", "Y", "env_light"]
                    rel material:binding = </Root/Materials/Red> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                    quatf xformOp:orient = (0.9659258, 0.25881904, 0, 0)
                    float3 xformOp:scale = (1, 1, 1)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                    over "Z"
                    {
                        quatf xformOp:orient = (-1.3315804e-7, 0, 1, 0)
                        float3 xformOp:scale = (0.8, 0.8, 1)
                        double3 xformOp:translate = (0, 0, 3)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
                    }

                    def "Spin" (
                        active = true
                        prepend apiSchemas = ["MaterialBindingAPI"]
                        customData = {
                            float3 rotationEulerHint = (0, 0, 1.0471976)
                        }
                        references = @frame70pct.usdz@
                    )
                    {
                        reorder nameChildren = ["Y", "Z", "X", "env_light", "gyro"]
                        rel material:binding = </Root/Materials/Blue> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                        quatf xformOp:orient = (0.8660254, 0, 0, 0.5)
                        float3 xformOp:scale = (1, 1, 1)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                        over "Z"
                        {
                            quatf xformOp:orient = (-1.3315805e-7, 0, 1, 0)
                            float3 xformOp:scale = (0.7, 0.7, 1)
                            double3 xformOp:translate = (0, 0, 3)
                            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
                        }

                        def "gyro" (
                            active = true
                            customData = {
                                float3 rotationEulerHint = (0, 0, 0)
                            }
                            references = @gyro.usdz@
                        )
                        {
                            reorder nameChildren = ["Spinner", "_materials", "Frame", "env_light", "Procession"]
                            quatf xformOp:orient = (1, 1.6847009e-17, 0, 0)
                            float3 xformOp:scale = (1, 1, 1)
                            float3 xformOp:translate = (0, 0, 0)
                            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                            over "Frame"
                            {
                                quatf xformOp:orient = (1, 0, 0, 0)
                                float3 xformOp:scale = (1, 1, 2)
                                double3 xformOp:translate = (0, 0, 1.2899999618530273)
                                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
                            }

                            over "Spinner"
                            {
                                quatf xformOp:orient = (1, 0, 0, 0)
                                float3 xformOp:scale = (1, 1, 1)
                                double3 xformOp:translate = (0, 0, 1.2899999618530273)
                                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
                            }

                            over "_materials"
                            {
                                over "White"
                                {
                                    token outputs:mtlx:surface
                                    token outputs:realitykit:vertex

                                    over "Principled_BSDF"
                                    {
                                        float inputs:opacity = 0
                                        float inputs:opacityThreshold = 0.1
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    def Scope "Materials" (
        active = true
    )
    {
        reorder nameChildren = ["Blue", "Green", "Red", "Gray"]
        float2 ui:nodegraph:node:pos = (20, 20)
        int ui:nodegraph:node:stackingOrder = 1

        def Material "Blue"
        {
            token outputs:mtlx:surface
            token outputs:realitykit:vertex
            token outputs:surface.connect = </Root/Materials/Blue/UsdPreviewSurface.outputs:surface>
            float2 ui:nodegraph:node:pos = (20, 20)
            int ui:nodegraph:node:stackingOrder = 1

            def Shader "UsdPreviewSurface"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (0.016804177, 0.198351, 1) (
                    colorSpace = "srgb_texture"
                )
                token outputs:surface
            }
        }

        def Material "Green"
        {
            token outputs:mtlx:surface
            token outputs:realitykit:vertex
            token outputs:surface.connect = </Root/Materials/Green/UsdPreviewSurface.outputs:surface>
            float2 ui:nodegraph:node:pos = (20, 20)
            int ui:nodegraph:node:stackingOrder = 1

            def Shader "UsdPreviewSurface"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (0, 0.97680455, 0) (
                    colorSpace = "srgb_texture"
                )
                token outputs:surface
            }
        }

        def Material "Red"
        {
            token outputs:mtlx:surface
            token outputs:realitykit:vertex
            token outputs:surface.connect = </Root/Materials/Red/UsdPreviewSurface.outputs:surface>
            float2 ui:nodegraph:node:pos = (20, 20)
            int ui:nodegraph:node:stackingOrder = 1

            def Shader "UsdPreviewSurface"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (1, 0.14913142, 0) (
                    colorSpace = "srgb_texture"
                )
                token outputs:surface
            }
        }

        def Material "Gray"
        {
            token outputs:mtlx:surface
            token outputs:realitykit:vertex
            token outputs:surface.connect = </Root/Materials/Gray/UsdPreviewSurface.outputs:surface>
            float2 ui:nodegraph:node:pos = (20, 20)
            int ui:nodegraph:node:stackingOrder = 1

            def Shader "UsdPreviewSurface"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (1, 1, 1) (
                    colorSpace = "srgb_texture"
                )
                token outputs:surface
            }
        }
    }

    def Xform "PointLight" (
        customData = {
            float3 rotationEulerHint = (0.5235988, 0, 0)
        }
    )
    {
        quatf xformOp:orient = (0.9659258, 0.25881904, 0, 0)
        float3 xformOp:translate = (0, 0, 1.5)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def RealityKitComponent "SpotLight"
        {
            uniform token info:id = "RealityKit.SpotLight"
            float intensity = 20000

            def RealityKitStruct "Shadow"
            {
            }
        }
    }
}

